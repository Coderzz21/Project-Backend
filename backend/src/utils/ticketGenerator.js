import QRCode from 'qrcode';
import jsPDF from 'jspdf';

export const generateQRCode = async (ticketCode) => {
  try {
    const qrCodeData = await QRCode.toDataURL(ticketCode, {
      errorCorrectionLevel: 'M',
      type: 'image/png',
      quality: 0.92,
      margin: 1,
      color: {
        dark: '#000000',
        light: '#FFFFFF',
      },
      width: 256,
    });
    return qrCodeData;
  } catch (error) {
    console.error('Error generating QR code:', error);
    throw error;
  }
};

export const generateTicketPDF = async (booking, event) => {
  try {
    const doc = new jsPDF();
    
    // Title
    doc.setFontSize(24);
    doc.setTextColor(59, 130, 246); // Blue color
    doc.text('EVENT TICKET', 20, 30);
    
    // Event details
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text(`Event: ${event.title}`, 20, 50);
    doc.text(`Date: ${new Date(event.date).toLocaleDateString()}`, 20, 65);
    doc.text(`Time: ${new Date(event.date).toLocaleTimeString()}`, 20, 80);
    doc.text(`Location: ${event.location}`, 20, 95);
    doc.text(`Seats: ${booking.seats}`, 20, 110);
    doc.text(`Ticket Code: ${booking.ticketCode}`, 20, 125);
    doc.text(`Total Amount: $${booking.totalAmount}`, 20, 140);
    
    // QR Code
    if (booking.qrCode) {
      doc.addImage(booking.qrCode, 'PNG', 120, 50, 60, 60);
    }
    
    // Footer
    doc.setFontSize(10);
    doc.text('Please present this ticket at the venue entrance.', 20, 180);
    doc.text('Generated by EventHub', 20, 190);
    
    return doc.output('arraybuffer');
  } catch (error) {
    console.error('Error generating ticket PDF:', error);
    throw error;
  }
};